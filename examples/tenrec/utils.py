import pandas as pd
import tfrecord
from tqdm import tqdm
from tfrecord.tools import tfrecord2idx
from tfrecord.torch.dataset import TFRecordDataset
from torch.utils.data import DataLoader

class TFRecordDataloader:
    def __init__(self, dataset, batch_size, label_name, num_workers=12):
        """
        Initializes the TFRecordDataloader class.

        Args:
            dataset (torch.utils.data.Dataset): The dataset object that contains the TFRecord data.
            batch_size (int): The number of samples to include in each batch.
            label_name (str): The name of the feature that represents the labels in the dataset.
            num_workers (int, optional): The number of worker processes to use for data loading. Defaults to 8.
        """
        self.dataloader = DataLoader(dataset, batch_size=batch_size, num_workers=num_workers)
        self.label_name = label_name
    
    def __iter__(self):
        """
        Iterates over the batches generated by the DataLoader and performs preprocessing on each batch.

        Yields:
            tuple: A tuple (inputs, labels) where inputs is a dictionary of input tensors and labels is the label tensor.
        """
        for batch in self.dataloader:
            inputs, labels = {}, None
            for feat_name, feat_tensor in batch.items():
                # Check if the last dimension of the feature tensor is 1
                if feat_tensor.size(-1) == 1:
                    # Squeeze the tensor if the last dimension is 1
                    feat_tensor = feat_tensor.squeeze(dim=-1)
                if feat_name == self.label_name:
                    # Assign the feature tensor to the labels variable
                    labels = feat_tensor
                else:
                    # Add the feature tensor to the inputs dictionary
                    inputs[feat_name] = feat_tensor
            yield inputs, labels


# class TFRecordDataloader:
#     def __init__(self, dataset, batch_size, label_name, num_workers=8):
#         self.dataloader = DataLoader(dataset, batch_size=batch_size, num_workers=num_workers)
#         self.label_name = label_name
    
#     def __iter__(self):
#         for batch in self.dataloader:
#             x, y = {}, None
#             for feat_name, feat_tensor in batch.items():
#                 # 判断最后一维是否为1
#                 if feat_tensor.size(-1) == 1:
#                     # 如果是1，则进行squeeze操作
#                     feat_tensor = feat_tensor.squeeze(dim=-1)
#                 if feat_name==self.label_name:
#                     y = feat_tensor
#                 else:
#                     x[feat_name] = feat_tensor
#             yield x, y

def dataframe_to_tfrecord(df, tfrecord_file_path, index_file_path, column_dtypes):
    """
    将Pandas DataFrame转换为TFRecord文件并创建索引文件。
    
    参数：
        df (pd.DataFrame): 要转换的Pandas DataFrame。
        tfrecord_file_path (str): 输出的TFRecord文件路径。
        index_file_path (str): 输出的索引文件路径。
        column_dtypes (dict): 指定每列的数据类型，格式为：{'column_name': 'tfrecord_dtype'}。
    """

    writer = tfrecord.TFRecordWriter(tfrecord_file_path)

    # 遍历DataFrame的每一行
    for _, row in tqdm(df.iterrows()):
        # 将行数据转换为字典格式
        row_dict = row.to_dict()
        # 创建一个字典来存储转换后的行数据
        converted_row = {column:(row_dict[column], dtype) for column, dtype in column_dtypes.items()}
        # 将转换后的行数据写入TFRecord文件
        writer.write(converted_row)
    # 关闭TFRecordWriter
    writer.close()
    tfrecord2idx.create_index(tfrecord_file=tfrecord_file_path, index_file=index_file_path)
    
def create_tfrecord_dataloader(tfrecord_file_path, index_file_path, batch_size, label_name, num_workers=8):
    dataset = TFRecordDataset(data_path=tfrecord_file_path, index_path=index_file_path)
    tfrecord_dataloader = TFRecordDataloader(dataset, batch_size, label_name, num_workers=num_workers)
    return tfrecord_dataloader